Actividad 1:
Como administrador de base de datos, aprender Git es esencial para una gestión profesional y segura de los entornos. Permite versionar scripts SQL, automatizaciones y configuraciones, trabajar en equipo y tener historial de cambios. Mejora la organización y la trazabilidad del trabajo.

Deberían subirse scripts .sql, automatizaciones, documentación, y configuraciones.
No se deberían subirse backups, archivos binarios grandes, logs, ni datos sensibles como contraseñas.

El Software Libre ofrece múltiples ventajas: es gratuito, accesible, y permite modificar el código según las necesidades del proyecto. Tiene comunidades activas que aportan soporte, mejoras y documentación.
Como desventaja, puede requerir conocimientos técnicos más avanzados para su instalación y uso, y en algunos casos, la falta de soporte oficial puede ser un reto en entornos críticos. Aun así, su flexibilidad y potencial de personalización lo hacen una excelente opción en muchos escenarios profesionales.


Actividad 2:
¿Qué tan importante es escribir comentarios en los commits? ¿Por qué?
Es muy importante, porque los comentarios te ayudan a entender qué cambió y por qué. Si vos o alguien más vuelve al proyecto después de un tiempo, leer esos mensajes hace que todo tenga más sentido. Es como dejar notas para no perderse.

¿Por qué crees que es importante tener copias en repositorios remotos?
Porque si se rompe la computadora, perdés todo. Tener una copia en un repositorio remoto (como GitHub o GitLab) te salva. Además, si trabajás en equipo, todos pueden acceder al proyecto y ver los cambios actualizados.

¿Cuál crees que es la ventaja de tener todas las versiones en una copia local?
La ventaja es que podés trabajar sin conexión, revisar el historial de cambios, volver a versiones anteriores o arreglar errores, todo desde tu computadora. Es rápido y no dependés de Internet para seguir avanzando.

Actividad 3:
Trabajar con ramas es muy importante porque te permite probar cosas nuevas o hacer cambios sin arruinar la versión principal del proyecto. Podés trabajar tranquilo sabiendo que, si algo sale mal, no rompiste nada. Es una forma ordenada de desarrollar.

Los tipos de ramas que más se usan son:
- Desarrollo: se usan para agregar nuevas funciones.
- Test: donde se van juntando todos los cambios antes de pasarlos a producción.
- Main o produción: es la principal, la versión "estable".
- Ramas de corrección (hotfix, bugfix): para arreglar errores rápido sin tener que esperar a otros cambios.
Estas ramas ayudan a organizar el trabajo, especialmente cuando hay más de una persona en el equipo.

Usar tags también es muy útil, porque marcan momentos importantes del proyecto, como una versión lista para entregar. Sirve para tener puntos de referencia claros y volver a ellos si hace falta.